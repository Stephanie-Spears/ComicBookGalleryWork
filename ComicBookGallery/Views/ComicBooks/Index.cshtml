@model ComicBookGallery.Models.ComicBook[]

@{
    ViewBag.Title = "Comic Books";
}

<h2>@ViewBag.Title</h2>

<div class="row">
    @foreach (var comicBook in Model)
    {
        <div class="col-md-3">
            @*
                Render a hyperlink using the Html.ActionLink method
                For the link text, use the comicBook.DisplayText property values
                For the action name, use the string literal Detail.
                For the route values, instantiate an anonymous object with an id property set to the comicBook.Id property value.
            *@
            <h4>@Html.ActionLink(comicBook.DisplayText, "Detail", new { id = comicBook.Id })</h4>
            <a href="@Url.Action("Detail", new {id = comicBook.Id })">
                <img src="/Images/@comicBook.CoverImageFileName"
                     alt="@comicBook.DisplayText"
                     class="img-responsive" />
            </a>
        </div>
    }
</div>


@*Generated via ComicBooksControllers.cs inside Views/ComicBooks (parallel to Details.cshtml), click View->Add View->Index, Empty without Model*@


@* A view start file (“Views/_ViewStart.cshtml”) allows you to provide code to execute at teh start of each view's rendering *@

@* Anonymous types allow you to instantiate objects without defining a class beforehand.
*@

@* If you don’t supply a controller name when calling the ActionLink HTML helper method, MVC will use the current controller’s name. *@

@* The Html.ActionLink and Url.Action methods differ in that the Html.ActionLink method generates a complete <a> element whereas the Url.Action method just generates a URL string. *@

@* We can escape reserved C# keywords in Razor by prefixing them with @ *@